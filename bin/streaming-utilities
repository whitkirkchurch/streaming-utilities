#!/usr/bin/env python3

import os
import requests

import click

import datetime

from pyairtable import Table, utils
from jinja2 import Environment, FileSystemLoader, select_autoescape

AIRTABLE_API_KEY = os.environ["AIRTABLE_API_KEY"]
AIRTABLE_BASE_ID = os.environ["AIRTABLE_BASE_ID"]
AIRTABLE_SERVICES_TABLE_ID = os.environ["AIRTABLE_SERVICES_TABLE_ID"]

CHURCHSUITE_ACCOUNT = os.environ["CHURCHSUITE_ACCOUNT"]

CHURCHSUITE_CATEGORIES_TO_SYNC = [
    "1",  # Special service
    "3",  # Regular service
    "9",  # Wedding
    "10",  # Funeral
    "16",  # Christmas
    "25",  # Easter
    "34",  # Choral Evensong
]

MAILGUN_DOMAIN = os.environ["MAILGUN_DOMAIN"]
MAILGUN_API_KEY = os.environ["MAILGUN_API_KEY"]
MAIL_TO_ADDRESS = os.environ["MAIL_TO_ADDRESS"]


@click.group(chain=True)
def utilities():
    pass


@utilities.command()
def import_from_churchsuite():

    click.echo(click.style("Loading events from ChurchSuite…", fg="blue"))

    featured_events_url = (
        "https://{churchsuite_account_id}.churchsuite.co.uk/embed/calendar/json".format(
            churchsuite_account_id=CHURCHSUITE_ACCOUNT
        )
    )

    params = {"category_ids": ",".join(CHURCHSUITE_CATEGORIES_TO_SYNC)}

    resp = requests.get(url=featured_events_url, params=params)
    churchsuite_events = resp.json()

    events_to_sync = {}

    for event in churchsuite_events:

        service_url = (
            "https://{churchsuite_account_id}.churchsuite.co.uk/event/{id}".format(
                id=event["identifier"], churchsuite_account_id=CHURCHSUITE_ACCOUNT
            )
        )

        events_to_sync[service_url] = {
            "name": event["name"],
            "datetime": event["datetime_start"],
            "category": event["category"]["name"],
        }

    table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_SERVICES_TABLE_ID)

    click.echo(click.style("Comparing and synchronising…", fg="blue"))

    for event_sync_identifier, event in events_to_sync.items():

        click.echo(
            click.style(
                "Searching for event {event_id}".format(event_id=event_sync_identifier)
            )
        )

        existing_event = table.first(
            formula="{ChurchSuite event} = '" + event_sync_identifier + "'"
        )

        event_data_blob = {
            "ChurchSuite event": event_sync_identifier,
            "Name": event["name"],
            "Date & time": event["datetime"],
            "Type": event["category"],
        }

        if existing_event:
            click.echo(click.style("Match found, updating"))
            table.update(existing_event["id"], event_data_blob)
        else:
            click.echo(click.style("Not found, creating a new record!"))
            table.create(event_data_blob)

    click.echo(click.style("Done!", fg="green"))


@utilities.command()
@click.option("--send-email/--dry-run", default=False)
def send_report(send_email):

    click.echo(click.style("Getting services from Airtable…", fg="blue"))

    services_table = Table(
        AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_SERVICES_TABLE_ID
    )

    services_to_stream = services_table.all(
        formula="AND({Date & time} >= TODAY(),{Streaming?} = 'Yes')",
        sort=["Date & time"],
    )

    services_undecided = services_table.all(
        formula="AND({Date & time} >= TODAY(),{Streaming?} = '')",
        sort=["Date & time"],
    )

    click.echo(click.style("Preparing email content…", fg="blue"))

    now = datetime.datetime.now()

    email_variables = {
        "services_this_week": [],
        "services_later": [],
        "services_undecided": [],
        "send_time_string": now.strftime("%Y-%m-%d %H:%M:%S"),
    }

    next_week = datetime.datetime.today() + datetime.timedelta(weeks=1)

    for service in services_to_stream:

        service_datetime = utils.datetime_from_iso_str(service["fields"]["Date & time"])

        service_data = build_service_data_from_service(service)

        if service_datetime >= next_week:
            email_variables["services_later"].append(service_data)
        else:
            email_variables["services_this_week"].append(service_data)

    for service in services_undecided:
        email_variables["services_undecided"].append(
            build_service_data_from_service(service)
        )

    click.echo(click.style("Building template…", fg="blue"))

    env = Environment(
        loader=FileSystemLoader("templates"), autoescape=select_autoescape()
    )

    template = env.get_template("summary_email.html")

    email_html_content = template.render(email_variables)

    if send_email:
        click.echo(click.style("Sending summary email…", fg="blue"))
        requests.post(
            "https://api.mailgun.net/v3/{domain}/messages".format(
                domain=MAILGUN_DOMAIN
            ),
            auth=("api", MAILGUN_API_KEY),
            data={
                "from": "Streaming Services Robot <comms@whitkirkchurch.org.uk>",
                "to": MAIL_TO_ADDRESS,
                "subject": "Streaming services summary: {date}".format(
                    date=now.strftime("%A %-d %B %Y")
                ),
                "html": email_html_content,
            },
        )
    else:
        click.echo(click.style("Dry run; writing HTML to file…", fg="blue"))
        with open("email.html", "w") as text_file:
            text_file.write(email_html_content)

    click.echo(click.style("Done!", fg="green"))


def build_service_data_from_service(service):

    service_datetime = utils.datetime_from_iso_str(service["fields"]["Date & time"])

    if service["fields"].get("Technician"):
        technician_name = service["fields"]["Technician"]["name"]
    else:
        technician_name = None

    if service["fields"].get("Streaming?") and service["fields"]["Streaming?"] == "Yes":
        streaming = True
    else:
        streaming = False

    if service["fields"].get("Fee payable?"):
        fee_payable = True
    else:
        fee_payable = False

    return {
        "url": "https://airtable.com/{base_id}/{table_id}/{item_id}".format(
            base_id=AIRTABLE_BASE_ID,
            table_id=AIRTABLE_SERVICES_TABLE_ID,
            item_id=service["id"],
        ),
        "title": service["fields"]["Name"],
        "type": service["fields"]["Type"],
        "datetime": service_datetime.strftime("%A %-d %B %Y at %-I.%M %p"),
        "technician": technician_name,
        "streaming": streaming,
        "fee_payable": fee_payable,
    }


if __name__ == "__main__":
    utilities()
