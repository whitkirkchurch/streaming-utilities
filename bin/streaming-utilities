#!/usr/bin/env python3

import os
import resource
import requests

import click

import datetime

from pyairtable import Table, utils
from jinja2 import Environment, FileSystemLoader, select_autoescape

import google.oauth2.credentials
import google_auth_oauthlib.flow
import googleapiclient.discovery
import googleapiclient.errors

AIRTABLE_API_KEY = os.environ["AIRTABLE_API_KEY"]
AIRTABLE_BASE_ID = os.environ["AIRTABLE_BASE_ID"]
AIRTABLE_SERVICES_TABLE_ID = os.environ["AIRTABLE_SERVICES_TABLE_ID"]

CHURCHSUITE_ACCOUNT = os.environ["CHURCHSUITE_ACCOUNT"]

CHURCHSUITE_CATEGORIES_TO_SYNC = [
    "1",  # Special service
    "3",  # Regular service
    "9",  # Wedding
    "10",  # Funeral
    "16",  # Christmas
    "25",  # Easter
    "34",  # Choral Evensong
]

MAILGUN_DOMAIN = os.environ["MAILGUN_DOMAIN"]
MAILGUN_API_KEY = os.environ["MAILGUN_API_KEY"]
MAIL_TO_ADDRESS = os.environ["MAIL_TO_ADDRESS"]

GOOGLE_OAUTH_SCOPES = ["https://www.googleapis.com/auth/youtube.force-ssl"]
GOOGLE_CLIENT_SECRET_FILE = "client_secret_532410402320-mv0adcfbvdulivvlg246dmk9m957k2hq.apps.googleusercontent.com.json"


@click.group(chain=True)
def utilities():
    pass


@utilities.command()
def import_from_churchsuite():

    click.echo(click.style("Loading events from ChurchSuite…", fg="blue"))

    featured_events_url = (
        "https://{churchsuite_account_id}.churchsuite.co.uk/embed/calendar/json".format(
            churchsuite_account_id=CHURCHSUITE_ACCOUNT
        )
    )

    params = {"category_ids": ",".join(CHURCHSUITE_CATEGORIES_TO_SYNC)}

    resp = requests.get(url=featured_events_url, params=params)
    churchsuite_events = resp.json()

    events_to_sync = {}

    for event in churchsuite_events:

        service_url = (
            "https://{churchsuite_account_id}.churchsuite.co.uk/event/{id}".format(
                id=event["identifier"], churchsuite_account_id=CHURCHSUITE_ACCOUNT
            )
        )

        events_to_sync[service_url] = {
            "name": event["name"],
            "datetime": event["datetime_start"],
            "category": event["category"]["name"],
        }

    table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_SERVICES_TABLE_ID)

    click.echo(click.style("Comparing and synchronising…", fg="blue"))

    for event_sync_identifier, event in events_to_sync.items():

        click.echo(
            click.style(
                "Searching for event {event_id}".format(event_id=event_sync_identifier)
            )
        )

        existing_event = table.first(
            formula="{ChurchSuite event} = '" + event_sync_identifier + "'"
        )

        event_data_blob = {
            "ChurchSuite event": event_sync_identifier,
            "Name": event["name"],
            "Date & time": event["datetime"],
            "Type": event["category"],
        }

        if existing_event:
            click.echo(click.style("Match found, updating"))
            table.update(existing_event["id"], event_data_blob)
        else:
            click.echo(click.style("Not found, creating a new record!"))
            table.create(event_data_blob)

    click.echo(click.style("Done!", fg="green"))


@utilities.command()
@click.option("--send-email/--dry-run", default=False)
def send_report(send_email):

    click.echo(click.style("Getting services from Airtable…", fg="blue"))

    services_table = Table(
        AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_SERVICES_TABLE_ID
    )

    services_to_stream = services_table.all(
        formula="AND({Date & time} >= TODAY(),{Streaming?} = 'Yes')",
        sort=["Date & time"],
    )

    services_undecided = services_table.all(
        formula="AND({Date & time} >= TODAY(),{Streaming?} = '')",
        sort=["Date & time"],
    )

    click.echo(click.style("Preparing email content…", fg="blue"))

    now = datetime.datetime.now()

    email_variables = {
        "services_this_week": [],
        "services_later": [],
        "services_undecided": [],
        "send_time_string": now.strftime("%Y-%m-%d %H:%M:%S"),
    }

    next_week = datetime.datetime.today() + datetime.timedelta(weeks=1)

    for service in services_to_stream:

        service_datetime = utils.datetime_from_iso_str(service["fields"]["Date & time"])

        service_data = build_service_data_from_service(service)

        if service_datetime >= next_week:
            email_variables["services_later"].append(service_data)
        else:
            email_variables["services_this_week"].append(service_data)

    for service in services_undecided:
        email_variables["services_undecided"].append(
            build_service_data_from_service(service)
        )

    click.echo(click.style("Building template…", fg="blue"))

    env = Environment(
        loader=FileSystemLoader("templates"), autoescape=select_autoescape()
    )

    template = env.get_template("summary_email.html")

    email_html_content = template.render(email_variables)

    if send_email:
        click.echo(click.style("Sending summary email…", fg="blue"))
        requests.post(
            "https://api.mailgun.net/v3/{domain}/messages".format(
                domain=MAILGUN_DOMAIN
            ),
            auth=("api", MAILGUN_API_KEY),
            data={
                "from": "Streaming Services Robot <comms@whitkirkchurch.org.uk>",
                "to": MAIL_TO_ADDRESS,
                "subject": "Streaming services summary: {date}".format(
                    date=now.strftime("%A %-d %B %Y")
                ),
                "html": email_html_content,
            },
        )
    else:
        click.echo(click.style("Dry run; writing HTML to file…", fg="blue"))
        with open("email.html", "w") as text_file:
            text_file.write(email_html_content)

    click.echo(click.style("Done!", fg="green"))


@utilities.command()
@click.option("--update/--preview", default=False)
def sync_with_youtube(update):

    click.echo(click.style("Getting services from Airtable…", fg="blue"))

    services_table = Table(
        AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_SERVICES_TABLE_ID
    )

    services_to_stream = services_table.all(
        formula="AND({Date & time} >= TODAY(),{Streaming?} = 'Yes')",
        sort=["Date & time"],
    )

    # print(services_to_stream)

    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

    api_service_name = "youtube"
    api_version = "v3"

    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists("token.json"):
        creds = google.oauth2.credentials.Credentials.from_authorized_user_file(
            "token.json", GOOGLE_OAUTH_SCOPES
        )
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
                GOOGLE_CLIENT_SECRET_FILE, GOOGLE_OAUTH_SCOPES
            )
            creds = flow.console
        # Save the credentials for the next run
        with open("token.json", "w") as token:
            token.write(creds.to_json())

    youtube = googleapiclient.discovery.build(
        api_service_name, api_version, credentials=creds
    )

    for service in services_to_stream:

        service_datetime = utils.datetime_from_iso_str(service["fields"]["Date & time"])

        service_title_string = "{title}: {date}".format(
            title=service["fields"]["Liturgical Name"]
            if service["fields"].get("Liturgical Name")
            else service["fields"]["Name"],
            date=service_datetime.strftime("%-d %B %Y"),
        )

        # This is a hack to force a capital on the first letter of the first word, but leave the rest of the string intact.
        service_title_string = (
            service_title_string[:1].upper() + service_title_string[1:]
        )

        click.echo(service_title_string)

        try:

            resource_body = {
                "snippet": {
                    "scheduledStartTime": service["fields"]["Date & time"],
                    "title": service_title_string,
                },
                "status": {"privacyStatus": "public"},
            }

            if service["fields"].get("YouTube ID"):

                click.echo("YouTube ID found, updating!")

                resource_body["id"] = service["fields"]["YouTube ID"]

                request = youtube.liveBroadcasts().update(
                    part="snippet,status",
                    body=resource_body,
                )

            else:

                click.echo(click.style("No YouTube ID found, creating!", fg="green"))

                request = youtube.liveBroadcasts().insert(
                    part="snippet,status",
                    body=resource_body,
                )

            if update:
                response = request.execute()
                services_table.update(service["id"], {"YouTube ID": response["id"]})
            else:
                click.echo(click.style("In preview mode, skipping", fg="yellow"))

        except googleapiclient.errors.HttpError as err:
            print(err)

    click.echo(click.style("Done!", fg="green"))


def build_service_data_from_service(service):

    service_datetime = utils.datetime_from_iso_str(service["fields"]["Date & time"])

    if service["fields"].get("Technician"):
        technician_name = service["fields"]["Technician"]["name"]
    else:
        technician_name = None

    if service["fields"].get("Streaming?") and service["fields"]["Streaming?"] == "Yes":
        streaming = True
    else:
        streaming = False

    if service["fields"].get("Fee payable?"):
        fee_payable = True
    else:
        fee_payable = False

    return {
        "url": "https://airtable.com/{base_id}/{table_id}/{item_id}".format(
            base_id=AIRTABLE_BASE_ID,
            table_id=AIRTABLE_SERVICES_TABLE_ID,
            item_id=service["id"],
        ),
        "title": service["fields"]["Name"],
        "type": service["fields"]["Type"],
        "datetime": service_datetime.strftime("%A %-d %B %Y at %-I.%M %p"),
        "technician": technician_name,
        "streaming": streaming,
        "fee_payable": fee_payable,
    }


if __name__ == "__main__":
    utilities()
