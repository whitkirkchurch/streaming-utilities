#!/usr/bin/env python3

import sys
import os
import rollbar

ROLLBAR_ACCESS_TOKEN = os.environ["ROLLBAR_ACCESS_TOKEN"]

rollbar.init(ROLLBAR_ACCESS_TOKEN)


def rollbar_except_hook(exc_type, exc_value, traceback):
    rollbar.report_exc_info((exc_type, exc_value, traceback))
    sys.__excepthook__(exc_type, exc_value, traceback)


sys.excepthook = rollbar_except_hook

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))

import requests
import urllib.request

import botocore
import boto3
import click

import churchsuite

import datetime
import pytz

from pyairtable import utils
from jinja2 import Environment, FileSystemLoader, select_autoescape

import google.oauth2.credentials
import google_auth_oauthlib.flow
import googleapiclient.discovery
import googleapiclient.errors
from googleapiclient.http import MediaFileUpload

import services
from interfaces.youtube import video_in_playlist
from interfaces import wordpress, airtable

CHURCHSUITE_ACCOUNT = os.environ["CHURCHSUITE_ACCOUNT"]

CHURCHSUITE_CATEGORIES_TO_SYNC = [
    "1",  # Special service
    "3",  # Regular service
    "9",  # Wedding
    "10",  # Funeral
    "16",  # Christmas
    "25",  # Easter
    "34",  # Choral Evensong
    "35",  # Compline
    "36",  # Messy Church
]

MAILGUN_DOMAIN = os.environ["MAILGUN_DOMAIN"]
MAILGUN_API_KEY = os.environ["MAILGUN_API_KEY"]
MAIL_TO_ADDRESS = os.environ["MAIL_TO_ADDRESS"]

YOUTUBE_STREAM_ID = os.environ["YOUTUBE_STREAM_ID"]

YOUTUBE_NONPROFIT_CATEGORY_ID = "29"

GOOGLE_OAUTH_SCOPES = ["https://www.googleapis.com/auth/youtube.force-ssl"]
GOOGLE_CLIENT_SECRET_FILE = "client_secret.json"
GOOGLE_CREDENTIALS_FILE = "token.json"

AWS_S3_BUCKET_NAME = os.environ["AWS_S3_BUCKET_NAME"]
AWS_ACCESS_KEY_ID = os.environ["AWS_ACCESS_KEY_ID"]
AWS_SECRET = os.environ["AWS_SECRET"]

TZ_LONDON = pytz.timezone("Europe/London")

s3 = boto3.resource(
    "s3", aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET
)
bucket = s3.Bucket(AWS_S3_BUCKET_NAME)


@click.group(chain=True)
def utilities():
    pass


@utilities.command()
def import_from_churchsuite():

    cs = churchsuite.Account(CHURCHSUITE_ACCOUNT)

    click.echo(click.style("Loading events from ChurchSuite…", fg="blue"))

    churchsuite_events = cs.get_public_events(
        {"category_ids": ",".join(CHURCHSUITE_CATEGORIES_TO_SYNC)}
    )

    events_to_sync = {}

    for event in churchsuite_events:

        event_id = str(event.id)

        events_to_sync[event_id] = {
            "id": event_id,
            "identifier": event.object["identifier"],
            "name": event.object["name"],
            "datetime": event.localised_datetime_start,
            "category": event.object["category"]["name"],
            "category_id": event.object["category"]["id"],
        }

        if event.object["images"]:
            events_to_sync[event_id]["image_url"] = event.object["images"]["lg"]["url"]

    click.echo(click.style("Comparing and synchronising…", fg="blue"))

    for event_sync_identifier, event in events_to_sync.items():

        click.echo(
            click.style(
                "Searching for event {event_id}".format(event_id=event_sync_identifier)
            )
        )

        existing_event = airtable.services_table().first(
            formula="{ChurchSuite ID} = '" + event_sync_identifier + "'"
        )

        event_data_blob = {
            services.AIRTABLE_MAP["name"]: event["name"],
            services.AIRTABLE_MAP["datetime"]: event["datetime"].isoformat(),
            services.AIRTABLE_MAP["type"]: event["category"],
            services.AIRTABLE_MAP["churchsuite_id"]: str(event["id"]),
            services.AIRTABLE_MAP["churchsuite_public_identifier"]: event["identifier"],
            services.AIRTABLE_MAP["churchsuite_category_id"]: str(event["category_id"]),
        }

        if "image_url" in event:
            event_data_blob[services.AIRTABLE_MAP["churchsuite_image"]] = [
                utils.attachment(event["image_url"])
            ]

        if existing_event:
            click.echo(click.style("Match found, updating"))
            airtable.services_table().update(existing_event["id"], event_data_blob)
        else:
            click.echo(click.style("Not found, creating a new record!"))
            airtable.services_table().create(event_data_blob)

    click.echo(click.style("Done!", fg="green"))


@utilities.command()
@click.option("--send-email/--dry-run", default=False)
def send_report(send_email):

    click.echo(click.style("Sending email report", fg="blue"))

    click.echo(click.style("Getting services from Airtable…", fg="blue"))

    click.echo(click.style("Preparing email content…", fg="blue"))

    now = datetime.datetime.now()

    email_variables = {
        "services_this_week": [],
        "services_later": [],
        "services_undecided": [],
        "send_time_string": now.strftime("%Y-%m-%d %H:%M:%S"),
    }

    next_week = datetime.datetime.today().astimezone() + datetime.timedelta(weeks=1)

    for service_object in services.upcoming_streaming_services():

        if service_object.datetime >= next_week:
            email_variables["services_later"].append(service_object.service_data)
        else:
            email_variables["services_this_week"].append(service_object.service_data)

    for service_object in services.upcoming_services_with_undecided_stream_status():
        email_variables["services_undecided"].append(service_object.service_data)

    click.echo(click.style("Building template…", fg="blue"))

    env = Environment(
        loader=FileSystemLoader("templates"), autoescape=select_autoescape()
    )

    template = env.get_template("summary_email.html")

    email_html_content = template.render(email_variables)

    if send_email:
        click.echo(click.style("Sending summary email…", fg="blue"))
        requests.post(
            "https://api.mailgun.net/v3/{domain}/messages".format(
                domain=MAILGUN_DOMAIN
            ),
            auth=("api", MAILGUN_API_KEY),
            data={
                "from": "Streaming Services Robot <comms@whitkirkchurch.org.uk>",
                "to": MAIL_TO_ADDRESS,
                "subject": "Streaming services summary: {date}".format(
                    date=now.strftime("%A %-d %B %Y")
                ),
                "html": email_html_content,
            },
        )
    else:
        click.echo(click.style("Dry run; writing HTML to file…", fg="blue"))
        with open("email.html", "w") as text_file:
            text_file.write(email_html_content)

    click.echo(click.style("Done!", fg="green"))


@utilities.command()
@click.option("--update/--preview", default=False)
def sync_with_youtube(update):

    click.echo(click.style("Synchronising with YouTube", fg="blue"))

    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

    api_service_name = "youtube"
    api_version = "v3"

    creds = None
    # The file GOOGLE_CREDENTIALS_FILE stores the user's access and refresh tokens, and is created automatically when the authorization flow completes for the first time.

    try:
        bucket.download_file(GOOGLE_CREDENTIALS_FILE, GOOGLE_CREDENTIALS_FILE)
    except botocore.exceptions.ClientError as e:
        if e.response["Error"]["Code"] == "404":
            click.echo(click.style("Could not find credential file", fg="red"))
        else:
            # Something else has gone wrong.
            raise
    else:
        click.echo(click.style("Loaded credential file", fg="green"))
        creds = google.oauth2.credentials.Credentials.from_authorized_user_file(
            GOOGLE_CREDENTIALS_FILE, GOOGLE_OAUTH_SCOPES
        )

    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(google.auth.transport.requests.Request())
        else:
            bucket.download_file(GOOGLE_CLIENT_SECRET_FILE, GOOGLE_CLIENT_SECRET_FILE)
            flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
                GOOGLE_CLIENT_SECRET_FILE, GOOGLE_OAUTH_SCOPES
            )
            creds = flow.run_console()
        # Save the credentials for the next run
        with open(GOOGLE_CREDENTIALS_FILE, "w") as token:
            token.write(creds.to_json())

    # Send the new/updated token back to S3
    bucket.upload_file(GOOGLE_CREDENTIALS_FILE, GOOGLE_CREDENTIALS_FILE)

    youtube = googleapiclient.discovery.build(
        api_service_name, api_version, credentials=creds
    )

    for service_object in services.upcoming_streaming_services():

        click.echo(service_object.title_string_with_date)

        # Establish service defaults

        service_image = "images/default_thumbnails/service.jpg"

        # Apply category-specific overrides

        if service_object.has_category_behaviour_overrides:
            print("Overriding service defaults for category")

            if "default_thumbnail" in service_object.category_behaviour_overrides:
                service_image = "images/default_thumbnails/{}".format(
                    service_object.category_behaviour_overrides["default_thumbnail"]
                )

        if service_object.churchsuite_image_field:
            click.echo(click.style("Service-specific image found...", fg="blue"))
            image_data = service_object.churchsuite_image_field[0]
            image_url = image_data["url"]
            image_save_location = "images/service_specific/{}".format(
                image_data["filename"]
            )
            urllib.request.urlretrieve(image_url, image_save_location)

            service_image = image_save_location

        # Actually build objects and perform updates

        # Set the privacy

        # Build up the description

        if service_object.has_oos:
            youtube_description = (
                service_object.description
                + "\r\n\r\n"
                + "View the order of service online at https://whitkirkchurch.org.uk/oos/{slug}".format(
                    slug=service_object.slug
                )
            )
        else:
            youtube_description = service_object.description

        try:

            resource_body = {
                "snippet": {
                    "scheduledStartTime": service_object.datetime.isoformat(),
                    "title": service_object.title_string_with_date,
                    "description": youtube_description,
                },
                "status": {
                    "privacyStatus": service_object.youtube_privacy,
                },
            }

            if service_object.youtube_id:

                click.echo("YouTube ID found, updating!")

                resource_body["id"] = service_object.youtube_id

                request = youtube.liveBroadcasts().update(
                    part="snippet,status",
                    body=resource_body,
                )

            else:

                click.echo(click.style("No YouTube ID found, creating!", fg="green"))

                request = youtube.liveBroadcasts().insert(
                    part="snippet,status",
                    body=resource_body,
                )

            if update:
                response = request.execute()
                airtable.services_table().update(
                    service_object.id,
                    {services.AIRTABLE_MAP["youtube_id"]: response["id"]},
                )

                # Bind the liveBroadcast to our standard stream ID
                request = youtube.liveBroadcasts().bind(
                    part="id",
                    id=response["id"],
                    streamId=YOUTUBE_STREAM_ID,
                )

                response = request.execute()

                # Poke an update to the Video object for things the liveBroadcast won't update

                request = youtube.videos().update(
                    part="snippet,status",
                    body={
                        "id": response["id"],
                        "snippet": {
                            "categoryId": YOUTUBE_NONPROFIT_CATEGORY_ID,
                            "title": service_object.title_string_with_date,
                            "description": youtube_description,
                        },
                        "status": {
                            "privacyStatus": service_object.youtube_privacy,
                            "selfDeclaredMadeForKids": False,
                            "embeddable": service_object.youtube_is_embeddable,
                        },
                    },
                )

                response = request.execute()

            else:
                click.echo(
                    click.style(
                        "In preview mode, skipping broadcast create/update", fg="yellow"
                    )
                )

            if service_image:

                # Get the resource metadata, so we can compare the filename

                last_uploaded_file = service_object.youtube_image_last_uploaded_name

                if last_uploaded_file != service_image:

                    click.echo("Image has changed, replacing")

                    if update:
                        click.echo("Updating YouTube thumbnail...")
                        thumb_request = youtube.thumbnails().set(
                            videoId=response["id"],
                            media_body=MediaFileUpload(service_image),
                        )
                        thumb_request.execute()
                        airtable.services_table().update(
                            service_object.id,
                            {
                                services.AIRTABLE_MAP[
                                    "youtube_image_last_uploaded_name"
                                ]: service_image,
                            },
                        )
                    else:
                        click.echo(
                            click.style(
                                "In preview mode, skipping thumbnail", fg="yellow"
                            )
                        )

            # Now, add to playlists!
            for playlist in service_object.youtube_playlists_for_service:

                if update:

                    if not video_in_playlist(response["id"], playlist):
                        click.echo("Adding to playlist {}...".format(playlist))
                        playlist_request = youtube.playlistItems().insert(
                            part="snippet",
                            body={
                                "snippet": {
                                    "playlistId": playlist,
                                    "resourceId": {
                                        "kind": "youtube#video",
                                        "videoId": response["id"],
                                    },
                                }
                            },
                        )
                        playlist_request.execute()

                    else:
                        click.echo(
                            click.style(
                                f"Video already in playlist {playlist}", fg="yellow"
                            )
                        )
                else:
                    click.echo(
                        click.style(
                            "In preview mode, skipping add to playlist", fg="yellow"
                        )
                    )

        except googleapiclient.errors.HttpError as err:
            print(err)

    click.echo(click.style("Done!", fg="green"))


@utilities.command()
@click.option("--update/--preview", default=False)
def sync_with_wordpress(update):

    click.echo(click.style("Synchronising with Wordpress", fg="blue"))

    click.echo(click.style("Getting services from Airtable…", fg="blue"))

    click.echo(click.style("Syncing orders of service…", fg="blue"))

    previous_service = None

    for service_object in services.upcoming_services_with_oos():

        click.echo(service_object.title_string)

        wordpress.create_or_update_oos_entry(
            service_object, previous_service, airtable.services_table(), update
        )

        previous_service = service_object

    click.echo(click.style("Done!", fg="green"))

    click.echo(click.style("Syncing podcasts…", fg="blue"))

    for service_object in services.upcoming_streaming_services():

        click.echo(service_object.title_string)

        wordpress.create_or_update_podcast_entry(
            service_object, airtable.services_table(), update
        )

    click.echo(click.style("Done!", fg="green"))


if __name__ == "__main__":
    utilities()
